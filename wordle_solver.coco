from itertools import product
import words
from lib_rbon import flip, uncurry, split
import time

def step(command):
    # parse the command into info
    pairs = command |> split $ (" = ") |*> zip
    greens = []
    yellows = []
    bads = []
    unknown = [0,1,2,3,4]
    index = 0
    for i in pairs:
        if i[1] == 'g':
            greens.append((i[0], index))
            if index in unknown:
                unknown.remove(index) 
        elif i[1] == 'y':
            yellows.append((i[0], index))
        elif i[1] == 'b':
            bads.append((i[0]))
        index += 1

    alphabet = 'abcdefghijklmnopqrstuvwxyz'

    # remove bad letters from the pool
    chars = alphabet |> filter $ (y -> y not in bads) |> tuple

    "generating words sans bad letters..." |> print
    possible_words = product(chars, repeat=5) |> tuple
    'total words: ' + (possible_words |> len |> str) + '\n' |> print

    possible_words = possible_words \
    |> filter$(check_word$(greens, yellows, unknown)) \
    |> list # this is a list not a tuple to match the stable test

    print("TOTAL WORDS: " + str(len(possible_words)))

    return possible_words

def fits_green(word, green) = word[green[1]] == green[0]

def fits_all_greens(greens, word):
    for green in greens:
        if word[green[1]] != green[0]:
            return False
    return True

def fits_yellow(word, unknown, yellow):
    if word[yellow[1]] != yellow[0]:
        res = False
        for u in unknown:
            if word[u] == yellow[0]:
                return True
    return False

def fits_all_yellows(yellows, unknown, word):
    for yellow in yellows:
        if not fits_yellow(word, unknown, yellow):
            return False
    return True

def check_word(greens, yellows, unknown, word):
    if word |> fits_all_greens$(greens):
        if word |> fits_all_yellows$(yellows, unknown):
            if ''.join(word) in words.all_words:
                return True
    return False

def count_vowels(word) = word |> filter $ (x -> x in 'aeiouy') |> tuple |> len

def reveal_4_vowel_words(word):
    if (word |> count_vowels) == 4:
        if not (len(word) != len(set(word))): # filter dupes
            print word

def reveal_5_vowel_words(word):
    if (word |> count_vowels) == 5:
        if not (len(word) != len(set(word))): # filter dupes
            print word       

def fancy_format(iterable) = '\n'.join(tuple(map(''.join, iterable)))

if __name__ == '__main__':
    '' |> print
    # words.all_words |> fmap $ reveal_4_vowel_words
    "audio = ybgby" |> step |> fancy_format \
    |> print