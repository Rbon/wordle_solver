from itertools import product
import words as wordle_words
from lib_rbon import flip, uncurry, split
import time

data Info(greens=[], yellows=[], bads=[], unknown=[], words=())

data State(words=(), greens=[], yellows=[], bads=[], unknown=[], board=[])


def parse(command):
    pairs = command |> split $ (" = ") |*> zip
    greens = []
    yellows = []
    bads = []
    unknown = [0,1,2,3,4]
    index = 0
    for i in pairs:
        if i[1] == 'g':
            greens.append((i[0], index))
            if index in unknown:
                unknown.remove(index) 
        elif i[1] == 'y':
            yellows.append((i[0], index))
        elif i[1] == 'b':
            bads.append((i[0]))
        index += 1
    return Info(greens, yellows, bads, unknown)
    
def info_add(info1, info2):
    greens = info1.greens + info2.greens
    yellows = info1.yellows + info2.yellows
    bads = info1.bads + info2.bads
    unknown = info1.unknown + info2.unknown
    return Info(greens, yellows, bads, unknown)

def step(command):

    info = command |> parse

    greens = info.greens
    yellows = info.yellows
    bads = info.bads
    unknown = info.unknown

    "filtering words..." |> print
    start_time = time.perf_counter()
    # possible_words = possible_words \
    possible_words = wordle_words.all_words \
    |> fmap$(tuple) \ # this is needed for test parity
    |> filter$(check_word$(greens, yellows, unknown)) \
    |> list # this is also needed for test parity
    end_time = time.perf_counter()
    "finished in: " + (end_time - start_time |> str) |> print
    print("total words: " + str(len(possible_words)) + '\n')

    return possible_words

def new_parse(command):
    pairs = command |> split $ (" = ") |*> zip
    greens = []
    yellows = []
    bads = []
    unknown = [0,1,2,3,4]
    index = 0
    for i in pairs:
        if i[1] == 'g':
            greens.append((i[0], index))
            if index in unknown:
                unknown.remove(index) 
        elif i[1] == 'y':
            yellows.append((i[0], index))
        elif i[1] == 'b':
            bads.append((i[0]))
        index += 1
    return State((), greens, yellows, bads, unknown, [pairs |> tuple])

def add_state(state1, state2):
    words = state1.words + state2.words
    greens = state1.greens + state2.greens
    yellows = state1.yellows + state2.yellows
    bads = state1.bads + state2.bads
    unknown = state1.unknown + state2.unknown
    board = state1.board + state2.board
    return State(words, greens, yellows, bads, unknown, board)

def new_step(command, state=State(), cheat_level=1):

    new_state = command |> new_parse
    state = add_state(state, new_state)

    if len(state.words) == 0:
        case cheat_level:   
            match 0:
                "generating words sans bad letters..." |> print
                start_time = time.perf_counter()
                words = generate_words(state.bads)
                end_time = time.perf_counter()
                "finished in: " + (end_time - start_time |> str) |> print
                'total words: ' + (words |> len |> str) + '\n' |> print
            match 1:
                words = wordle_words.all_words
            match 2:
                words = wordle_words.possible_solutions
    else:
        words = state.words

    "filtering words..." |> print
    start_time = time.perf_counter()
    words = filter_words(words, state.greens, state.yellows, state.unknown, state.bads)
    end_time = time.perf_counter()
    "finished in: " + (end_time - start_time |> str) |> print
    print("total words: " + str(len(words)) + '\n')

    return State(
        words,
        state.greens,
        state.yellows,
        state.bads,
        state.unknown,
        state.board)

def generate_words(bads):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    chars = alphabet |> filter $ (y -> y not in bads) |> tuple
    possible_words = product(chars, repeat=5) |> tuple
    return possible_words

def filter_words(words, greens, yellows, unknown, bads) =
    words \ 
    |> fmap$(tuple) \ # this is needed for test parity
    |> filter$(check_word$(greens, yellows, unknown, bads)) \
    |> tuple

def fits_green(word, green) = word[green[1]] == green[0]

def fits_all_greens(greens, word):
    for green in greens:
        if word[green[1]] != green[0]:
            return False
    return True

def fits_yellow(word, unknown, yellow):
    if word[yellow[1]] != yellow[0]:
        res = False
        for u in unknown:
            if word[u] == yellow[0]:
                return True
    return False

def fits_all_yellows(yellows, unknown, word):
    for yellow in yellows:
        if not fits_yellow(word, unknown, yellow):
            return False
    return True

def bad_letters_in_word(bads, word):
    for bad in bads:
        if bad in word:
            return True
    return False

def check_word(greens, yellows, unknown, bads, word):
    if not word |> bad_letters_in_word$(bads):
        if word |> fits_all_greens$(greens):
            if word |> fits_all_yellows$(yellows, unknown):
                # if ''.join(word) in words.all_words:
                return True
    return False

def count_vowels(word) = word |> filter $ (x -> x in 'aeiouy') |> tuple |> len

def reveal_4_vowel_words(word):
    if (word |> count_vowels) == 4:
        if not (len(word) != len(set(word))): # filter dupes
            print word

def reveal_5_vowel_words(word):
    if (word |> count_vowels) == 5:
        if not (len(word) != len(set(word))): # filter dupes
            print word       

def fancy_format(iterable) = '\n'.join(tuple(map(''.join, iterable)))

def fancy_print(state, word_max=1000):
    words = state.words |> fancy_format
    if state.words |> len > word_max:
        print("Too many words to print.")
    else:
        print(words)
    print("Total words: " + str(len(state.words)))
    print("Greens: " + (state.greens |> str))
    print("Yellows: " + (state.yellows |> str))
    print("Bads: " + (state.bads |> str))
    print()
    print("Board: \n" + color_board(state.board))

def color_board(board) = board |> fmap$(color_guess) |> '\n'.join

def color_guess(guess) = guess |> fmap$(color_letter) |> ''.join

def color_letter(letter):
    case letter[1]:
        match 'g':
            return f"{bcolors.GREEN}{letter[0]}{bcolors.ENDC}"
        match 'y':
            return f"{bcolors.YELLOW}{letter[0]}{bcolors.ENDC}"
        match 'b':
            return f"{bcolors.BLACK}{letter[0]}{bcolors.ENDC}"

def main():
    state = State()
    # thing.strip() |> print
    while True:
        print()
        # print_green("Warning: No active frommets remain. Continue?")
        # print_yellow("Warning: No active frommets remain. Continue?")
        # print_black("Warning: No active frommets remain. Continue?")
        i = input("yes?: ")
        state = (i, state) |*> new_step$(cheat_level=1)
        state |> fancy_print

def color_green(text) = f"{bcolors.GREEN}{text}{bcolors.ENDC}"

def color_yellow(text) = f"{bcolors.YELLOW}{text}{bcolors.ENDC}"

def color_black(text) = f"{bcolors.BLACK}{text}{bcolors.ENDC}"

class bcolors:
    GREEN = '\033[97;42m'
    YELLOW = '\033[97;43m'
    BLACK = '\033[97;100m'
    ENDC = '\033[0m'

if __name__ == '__main__':
    # words.all_words |> fmap $ reveal_4_vowel_words
    # "audio = ybgby" |> step #|> fancy_format \
    # ("apdlp = ggbgy", State()) |*> new_step |> print #|> fancy_format \
    # |> print
    main()